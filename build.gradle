// Apply necessary plugins
plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'checkstyle'
}

// Configure repositories for dependencies
repositories {
    mavenCentral()
}

// Define project dependencies
dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    testImplementation 'org.mockito:mockito-core:5.10.0'

    String javaFxVersion = '17.0.10'
    String javaFxPlatform = getJavaFXPlatform()
    implementation "org.openjfx:javafx-base:$javaFxVersion:$javaFxPlatform"
    implementation "org.openjfx:javafx-controls:$javaFxVersion:$javaFxPlatform"
    implementation "org.openjfx:javafx-fxml:$javaFxVersion:$javaFxPlatform"
    implementation "org.openjfx:javafx-graphics:$javaFxVersion:$javaFxPlatform"

    implementation 'me.xdrop:fuzzywuzzy:1.4.0'
}

// Configure application-related settings
application {
    mainClass.set("cvb.ConvoBot")
}

// Configure settings for Shadow
shadowJar {
    archiveBaseName = "convobot"
    archiveClassifier = null
    dependsOn("distZip", "distTar");
}

// Configure run task settings
run {
    standardInput = System.in
    enableAssertions = true
}
runShadow {
    standardInput = System.in
    enableAssertions = false
}

// Configure test task
test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true
        showStandardStreams = false
    }
}

// Configure Javadoc generation
javadoc {
    destinationDir = file("$buildDir/docs/javadoc")
}
build.dependsOn javadoc

// Configure checkstyle
checkstyle {
    toolVersion = '10.12.5'
}
build.dependsOn 'checkstyleMain', 'checkstyleTest'

private static String getJavaFXPlatform() {
    OperatingSystem currentOS = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentOperatingSystem
    if (currentOS.isWindows()) {
        return 'win'
    } else if (currentOS.isLinux()) {
        return 'linux'
    } else if (currentOS.isMacOsX()) {
        return 'mac'
    }
    return null
}
